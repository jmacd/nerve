//go:build darwin

package main

import (
	"image"
	"time"

	"fyne.io/fyne"
	"fyne.io/fyne/app"
	"fyne.io/fyne/canvas"
	"github.com/jmacd/nerve/pru/gpixio"
)

type appState struct {
	frames *Frameset

	inputWindow  fyne.Window
	outputWindow fyne.Window

	inputImage  *canvas.Image
	outputImage *canvas.Image

	outputPixels *image.RGBA

	bank uint32
}

func newAppState(buf *gpixio.Buffer) (*appState, error) {
	app := app.New()

	outputPixels := image.NewRGBA(image.Rect(0, 0, 128, 128))

	inputWindow := app.NewWindow("Image")
	inputImage := canvas.NewImageFromImage(buf.RGBA)
	inputImage.FillMode = canvas.ImageFillOriginal
	inputWindow.SetContent(inputImage)
	inputWindow.Resize(fyne.Size{Width: 768, Height: 768})

	outputWindow := app.NewWindow("Visage")
	outputImage := canvas.NewImageFromImage(outputPixels)
	outputImage.FillMode = canvas.ImageFillOriginal
	outputWindow.SetContent(outputImage)
	outputWindow.Resize(fyne.Size{Width: 256, Height: 256})

	return &appState{
		frames:       &Frameset{},
		inputWindow:  inputWindow,
		outputWindow: outputWindow,
		inputImage:   inputImage,
		outputImage:  outputImage,
		outputPixels: outputPixels,
	}, nil
}

func (state *appState) test(fb *gpixio.FrameBank) {
	testRender(fb, state.outputPixels)

	canvas.Refresh(state.inputImage)
	canvas.Refresh(state.outputImage)

	time.Sleep(33 * time.Millisecond)
}

func (state *appState) finish(bank uint32) {
}

func (state *appState) run() error {
	state.outputWindow.Show()
	state.inputWindow.ShowAndRun()
	return nil
}

func (state *appState) waitReady() uint32 {
	b := state.bank
	state.bank = b ^ 1
	return b
}

func testRender(fb *gpixio.FrameBank, img *image.RGBA) {

	for i := 0; i < len(img.Pix); i += 4 {
		img.Pix[i+0] = 0
		img.Pix[i+1] = 0
		img.Pix[i+2] = 0
		img.Pix[i+3] = 255
	}

	for fi := 0; fi < 256; fi++ {
		for dri := 0; dri < 16; dri++ {
			for dpi := 0; dpi < 64; dpi++ {
				dp := fb[fi][dri][dpi]

				// 4 = bytes per pixel, 128 = image width

				// The following 16 positions are manual
				j11Off := 4 * (128*(dri+0) + dpi)
				j12Off := 4 * (128*(dri+16) + dpi)
				j21Off := 4 * (128*(dri+32) + dpi)
				j22Off := 4 * (128*(dri+48) + dpi)
				j31Off := 4 * (128*(dri+64) + dpi)
				j32Off := 4 * (128*(dri+80) + dpi)
				j41Off := 4 * (128*(dri+96) + dpi)
				j42Off := 4 * (128*(dri+112) + dpi)

				j51Off := 4 * (128*(dri+0) + 64 + dpi)
				j52Off := 4 * (128*(dri+16) + 64 + dpi)
				j61Off := 4 * (128*(dri+32) + 64 + dpi)
				j62Off := 4 * (128*(dri+48) + 64 + dpi)
				j71Off := 4 * (128*(dri+64) + 64 + dpi)
				j72Off := 4 * (128*(dri+80) + 64 + dpi)
				j81Off := 4 * (128*(dri+96) + 64 + dpi)
				j82Off := 4 * (128*(dri+112) + 64 + dpi)

				// The following code was generated by ../../cmd/mkmap
				if dp.Gpio2&(1<<4) != 0 {
					img.Pix[j12Off+1]++
				}
				if dp.Gpio0&(1<<26) != 0 {
					img.Pix[j12Off+2]++
				}
				if dp.Gpio2&(1<<2) != 0 {
					img.Pix[j11Off+0]++
				}
				if dp.Gpio2&(1<<3) != 0 {
					img.Pix[j11Off+1]++
				}
				if dp.Gpio2&(1<<5) != 0 {
					img.Pix[j11Off+2]++
				}
				if dp.Gpio0&(1<<23) != 0 {
					img.Pix[j12Off+0]++
				}
				if dp.Gpio2&(1<<23) != 0 {
					img.Pix[j22Off+1]++
				}
				if dp.Gpio2&(1<<24) != 0 {
					img.Pix[j22Off+2]++
				}
				if dp.Gpio0&(1<<27) != 0 {
					img.Pix[j21Off+0]++
				}
				if dp.Gpio2&(1<<1) != 0 {
					img.Pix[j21Off+1]++
				}
				if dp.Gpio0&(1<<22) != 0 {
					img.Pix[j21Off+2]++
				}
				if dp.Gpio2&(1<<22) != 0 {
					img.Pix[j22Off+0]++
				}
				if dp.Gpio1&(1<<18) != 0 {
					img.Pix[j31Off+1]++
				}
				if dp.Gpio0&(1<<31) != 0 {
					img.Pix[j31Off+2]++
				}
				if dp.Gpio1&(1<<16) != 0 {
					img.Pix[j32Off+0]++
				}
				if dp.Gpio0&(1<<3) != 0 {
					img.Pix[j32Off+1]++
				}
				if dp.Gpio0&(1<<5) != 0 {
					img.Pix[j32Off+2]++
				}
				if dp.Gpio0&(1<<30) != 0 {
					img.Pix[j31Off+0]++
				}
				if dp.Gpio0&(1<<2) != 0 {
					img.Pix[j41Off+0]++
				}
				if dp.Gpio0&(1<<15) != 0 {
					img.Pix[j41Off+1]++
				}
				if dp.Gpio1&(1<<17) != 0 {
					img.Pix[j41Off+2]++
				}
				if dp.Gpio3&(1<<21) != 0 {
					img.Pix[j42Off+0]++
				}
				if dp.Gpio3&(1<<19) != 0 {
					img.Pix[j42Off+1]++
				}
				if dp.Gpio0&(1<<4) != 0 {
					img.Pix[j42Off+2]++
				}
				if dp.Gpio0&(1<<11) != 0 {
					img.Pix[j51Off+1]++
				}
				if dp.Gpio0&(1<<10) != 0 {
					img.Pix[j51Off+2]++
				}
				if dp.Gpio0&(1<<9) != 0 {
					img.Pix[j52Off+0]++
				}
				if dp.Gpio0&(1<<8) != 0 {
					img.Pix[j52Off+1]++
				}
				if dp.Gpio2&(1<<17) != 0 {
					img.Pix[j52Off+2]++
				}
				if dp.Gpio2&(1<<25) != 0 {
					img.Pix[j51Off+0]++
				}
				if dp.Gpio2&(1<<16) != 0 {
					img.Pix[j61Off+0]++
				}
				if dp.Gpio2&(1<<15) != 0 {
					img.Pix[j61Off+1]++
				}
				if dp.Gpio2&(1<<14) != 0 {
					img.Pix[j61Off+2]++
				}
				if dp.Gpio2&(1<<13) != 0 {
					img.Pix[j62Off+0]++
				}
				if dp.Gpio2&(1<<10) != 0 {
					img.Pix[j62Off+1]++
				}
				if dp.Gpio2&(1<<12) != 0 {
					img.Pix[j62Off+2]++
				}
				if dp.Gpio2&(1<<6) != 0 {
					img.Pix[j72Off+0]++
				}
				if dp.Gpio3&(1<<18) != 0 {
					img.Pix[j72Off+1]++
				}
				if dp.Gpio2&(1<<7) != 0 {
					img.Pix[j72Off+2]++
				}
				if dp.Gpio2&(1<<11) != 0 {
					img.Pix[j71Off+0]++
				}
				if dp.Gpio2&(1<<9) != 0 {
					img.Pix[j71Off+1]++
				}
				if dp.Gpio2&(1<<8) != 0 {
					img.Pix[j71Off+2]++
				}
				if dp.Gpio0&(1<<14) != 0 {
					img.Pix[j82Off+1]++
				}
				if dp.Gpio3&(1<<20) != 0 {
					img.Pix[j82Off+2]++
				}
				if dp.Gpio3&(1<<17) != 0 {
					img.Pix[j81Off+0]++
				}
				if dp.Gpio3&(1<<16) != 0 {
					img.Pix[j81Off+1]++
				}
				if dp.Gpio3&(1<<15) != 0 {
					img.Pix[j81Off+2]++
				}
				if dp.Gpio3&(1<<14) != 0 {
					img.Pix[j82Off+0]++
				}
			}
		}
	}
}
