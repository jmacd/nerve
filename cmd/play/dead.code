
func telemetry() func() {
	controller, err := stdout.NewExportPipeline(stdout.Config{}, time.Second*1)
	if err != nil {
		log.Fatal(err)
	}
	global.SetMeterProvider(controller)

	if err != nil {
		log.Fatal(err)
	}
	return controller.Stop
}

// var (
// 	meter  = global.Meter("main")
// 	frames = metric.Must(meter).NewInt64Counter("frames").Bind()
// )

// stop := telemetry()
// defer stop()

func luv(sender *Sender, lc *xl.LaunchControl) {
	for {
		level := lc.Get(xl.ControlKnobSendA[0])

		wX, wY, wZ := colorful.XyyToXyz(0.5*lc.Get(xl.ControlKnobSendA[1]), 0.5*lc.Get(xl.ControlKnobSendA[2]), 1)
		wref := [3]float64{wX, wY, wZ}

		for y := 0; y < height; y++ {
			for x := 0; x < width; x++ {
				var c Color

				c = colorful.LuvWhiteRef(
					level,
					(float64(y)+zeroOffset)/(height-1+zeroOffset),
					(float64(x)+zeroOffset)/(width-1+zeroOffset),
					wref,
				)

				sender.Buffer[y*width+x] = c.Clamped()

			}
		}

		sender.send()
		time.Sleep(time.Millisecond * 10)
	}
}

func hcl(sender *Sender, lc *xl.LaunchControl) {
	for {
		level := lc.Get(xl.ControlKnobSendA[0])

		wref := [3]float64{0.5 + lc.Get(xl.ControlKnobSendA[1]), 1.00000, 0.5 + lc.Get(xl.ControlKnobSendA[2])}

		for y := 0; y < height; y++ {
			for x := 0; x < width; x++ {
				var c Color

				c = colorful.HclWhiteRef(
					360*(float64(x)+zeroOffset)/(width-1+zeroOffset),
					(float64(y)+zeroOffset)/(height-1+zeroOffset),
					level,
					wref,
				)

				sender.Buffer[y*width+x] = c.Clamped()

			}
		}

		sender.send()
		time.Sleep(time.Millisecond * 10)
	}
}

func lab(sender *Sender, lc *xl.LaunchControl) {
	for {
		level := lc.Get(xl.ControlKnobSendA[0])

		wX, wY, wZ := colorful.XyyToXyz(0.5*lc.Get(xl.ControlKnobSendA[1]), 0.5*lc.Get(xl.ControlKnobSendA[2]), 1)
		wref := [3]float64{wX, wY, wZ}

		for y := 0; y < height; y++ {
			for x := 0; x < width; x++ {
				var c Color

				c = colorful.LabWhiteRef(
					level,
					(float64(y)+zeroOffset)/(height-1+zeroOffset),
					(float64(x)+zeroOffset)/(width-1+zeroOffset),
					wref,
				)

				sender.Buffer[y*width+x] = c.Clamped()

			}
		}

		sender.send()
		time.Sleep(time.Millisecond * 10)
	}
}

func showHsluv(sender *Sender, lc *xl.LaunchControl) {
	for frame := 0; ; frame++ {
		wX, wY, wZ := colorful.XyyToXyz(0.5*lc.Get(xl.ControlKnobSendA[0]), 0.5*lc.Get(xl.ControlKnobSendA[1]), 1)
		wref := [3]float64{wX, wY, wZ}

		r, g, b := hsluv.HsluvToRGB(360*lc.Get(xl.ControlSlider[0]), 100*lc.Get(xl.ControlSlider[1]), 100*lc.Get(xl.ControlSlider[2]))
		c := Color{R: r, G: g, B: b}
		//fmt.Println("COLOR IN", c, wref)
		x1, y1, z1 := c.Xyz()
		//fmt.Println("XYZ", x1, y1, z1)
		x2, y2, Y2 := colorful.XyzToXyyWhiteRef(x1, y1, z1, wref)
		//fmt.Println("XYY", x2, y2, Y2)
		c = colorful.Xyy(x2, y2, Y2)
		//fmt.Println("RGB", c.R, c.G, c.B)

		for x := 0; x < width; x++ {
			for y := 0; y < height; y++ {
				sender.Buffer[y*width+x] = c
			}
		}

		sender.send()
		time.Sleep(10 * time.Millisecond)
	}
}

func gamma(sender *Sender, lc *xl.LaunchControl) {
	for frame := 0; ; frame++ {
		gamma := math.Max(lc.Get(xl.ControlKnobSendA[0])*3, 0.001)
		//gamma = 1.0

		for x := 0; x < width; x++ {
			for y := 0; y < height; y++ {
				sender.Buffer[y*width+x] = Color{
					R: math.Pow(float64(x)/float64(width), gamma),
					G: math.Pow(float64(x)/float64(width), gamma),
					B: math.Pow(float64(x)/float64(width), gamma),
				}
			}
		}

		sender.send()
		time.Sleep(10 * time.Millisecond)
	}
}

func walk(sender *Sender, lc *xl.LaunchControl) {
	last := time.Now()
	elapsed := 0.0

	for frame := 0; ; frame++ {
		now := time.Now()
		delta := now.Sub(last)

		last = now

		rate := 100 * lc.Get(xl.ControlKnobSendA[0])

		elapsed += rate * float64(delta.Seconds())

		spot := int64(elapsed) % pixels
		sender.Buffer[spot] = Color{
			R: lc.Get(xl.ControlSlider[0]) * lc.Get(xl.ControlKnobSendA[1]),
			G: lc.Get(xl.ControlSlider[1]) * lc.Get(xl.ControlKnobSendA[1]),
			B: lc.Get(xl.ControlSlider[2]) * lc.Get(xl.ControlKnobSendA[1]),
		}

		sender.send()
		time.Sleep(time.Duration(250*lc.Get(xl.ControlKnobSendA[0])) * time.Millisecond)
	}
}

func strobe2(sender *Sender, lc *xl.LaunchControl) {
	for frame := 0; ; frame++ {

		if frame%2 == 0 {
			for i := 0; i < pixels; i++ {
				sender.Buffer[i] = Color{
					R: lc.Get(xl.ControlSlider[3]) * lc.Get(xl.ControlKnobSendA[1]),
					G: lc.Get(xl.ControlSlider[4]) * lc.Get(xl.ControlKnobSendA[1]),
					B: lc.Get(xl.ControlSlider[5]) * lc.Get(xl.ControlKnobSendA[1]),
				}
			}
		} else {
			for i := 0; i < pixels; i++ {
				sender.Buffer[i] = Color{
					R: lc.Get(xl.ControlSlider[0]) * lc.Get(xl.ControlKnobSendA[1]),
					G: lc.Get(xl.ControlSlider[1]) * lc.Get(xl.ControlKnobSendA[1]),
					B: lc.Get(xl.ControlSlider[2]) * lc.Get(xl.ControlKnobSendA[1]),
				}
			}
		}

		sender.send()
		time.Sleep(time.Duration(250*lc.Get(xl.ControlKnobSendA[0])) * time.Millisecond)
	}
}

func colors(sender *Sender, lc *xl.LaunchControl) {
	start := time.Now()

	for {
		seconds := time.Now().Sub(start) / time.Second

		pattern := (seconds / 15) % 4

		for twoCount := 0.0; twoCount < 2; twoCount += 0.005 {
			level := lc.Get(xl.ControlKnobSendA[0])

			for y := 0; y < height; y++ {
				for x := 0; x < width; x++ {
					var c Color

					switch pattern {
					case 0:
						c = colorful.Lab(
							level,
							2*(float64(x)/(width-1)-0.5),
							2*(float64(y)/(height-1)-0.5),
						)
					case 1:
						c = colorful.Xyy(
							(float64(y)+zeroOffset)/(height-1+zeroOffset),
							(float64(x)+zeroOffset)/(width-1+zeroOffset),
							level,
						)
					case 2:
						c = colorful.Xyz(
							float64(x)/(width-1),
							float64(y)/(height-1),
							level,
						)
					case 3:
						c = colorful.Luv(
							level,
							2*(float64(x)/(width-1)-0.5),
							2*(float64(y)/(height-1)-0.5),
						)
					}

					sender.Buffer[y*width+x] = c.Clamped()

				}
			}

			sender.send()
			time.Sleep(time.Millisecond * 10)
		}
	}
}


func scroller(sender *artnet.Sender, lc *xl.LaunchControl) {
	img := image.NewRGBA(image.Rectangle{
		Min: image.Point{0, 0},
		Max: image.Point{width, height},
	})

	const S = height
	const N = height * 2

	const T = `
Hello, hello, 
and welcome to my show.
Yes, I'm belting while not melting,
even though I'm made of snow.
Perhaps you might recall,
I once needed my own flurry.
But now you need not worry...

Who can handle this enormous candle?
Unmeltable me.
Who's not sweating this sweltering setting?
Unmeltable me.
Yes, Elsa's powers grew,
and it's a whole new situation.
Because of our relation,
I now have self-refrigeration.

Who is present, but not liquescent?
(That's right, I just learned to read, and I like the big words.)
Unmeltable me.
Who's super cuddly and not all puddly?
Unmeltable me.
Who's inexhaustible, indefrostable, humble and fun?
It's unmeltable --
Oh, thank goodness you're here. Grab a seat, just about to bring it on home --
Meeeee!
`

	dc := gg.NewContextForRGBA(img)

	render, _ := prepareString(dc, T)

	// Position of the start of the string
	offset := float64(width / 2)
	lastTime := time.Now()

	currentFontSize := 0.0

	for {
		fontSize := 6 + lc.Get(xl.ControlKnobSendA[6])*20

		if currentFontSize != fontSize {
			if err := dc.LoadFontFace("/System/Library/Fonts/Avenir.ttc", fontSize); err != nil {
				panic(err)
			}
			currentFontSize = fontSize
		}

		rate := (lc.Get(xl.ControlKnobSendA[7]) - 0.5) * 200
		// fmt.Println("RATE", rate, lc.Get(xl.ControlKnobSendA[7]), lc.Get(xl.ControlKnobSendA[7])-0.5)

		now := time.Now()
		delta := now.Sub(lastTime).Seconds()
		lastTime = now
		offset += rate * delta

		// fmt.Println("OFFSET", offset)

		dc.SetRGB(lc.Get(xl.ControlSlider[5]), lc.Get(xl.ControlSlider[6]), lc.Get(xl.ControlSlider[7]))
		dc.Clear()
		dc.SetRGB(lc.Get(xl.ControlSlider[0]), lc.Get(xl.ControlSlider[1]), lc.Get(xl.ControlSlider[2]))

		// for i := 0; i <= N; i++ {
		// 	t := float64(i) / N
		// 	d := t*S*10*lc.Get(xl.ControlKnobSendA[0]) + lc.Get(xl.ControlKnobSendA[1])
		// 	a := t * math.Pi * 10 * lc.Get(xl.ControlKnobSendA[2])
		// 	x := width/2 + math.Cos(a)*d
		// 	y := height/2 + math.Sin(a)*d
		// 	r := t * lc.Get(xl.ControlKnobSendA[3]) * 8
		// 	dc.DrawCircle(x, y, r)
		// }
		// dc.Fill()

		dc.DrawStringAnchored(render, offset, S/2, 0, 0.5)

		for x := 0; x < width; x++ {
			for y := 0; y < height; y++ {
				idx := y*width + x
				value := img.RGBAAt(x, y)
				sender.Buffer[idx] = colorful.Color{
					R: float64(value.R) / 255,
					G: float64(value.G) / 255,
					B: float64(value.B) / 255,
				}
			}
		}

		sender.send()
		time.Sleep(time.Duration(250*lc.Get(xl.ControlKnobSendA[0])) * time.Millisecond)
	}
}
